data_sim(n=450)
data_sim <- function(n,sigma_n=.3){
# Define time
t <- seq(from=0, to=n,by=1)
tr1 = .01 * t
episilon <- rnorm(mean = 0, sd = sigma_n, n = n)
s1 <- sapply(X = t, function(t) seasonal(t=ti,amplitude = 2, period = 40))
s2 <- sapply(X = t, function(t) seasonal(t=ti, amplitude = 1, period = 13.3))
return(s1 + s2 + tr1 + epsilon)
}
data_sim(n=450)
data_sim <- function(n,sigma_n=.3){
# Define time
t <- seq(from=0, to=n,by=1)
tr1 = .01 * t
episilon <- rnorm(mean = 0, sd = sigma_n, n = n)
s1 <- sapply(X = t, function(t) seasonal(t=t,amplitude = 2, period = 40))
s2 <- sapply(X = t, function(t) seasonal(t=t, amplitude = 1, period = 13.3))
return(s1 + s2 + tr1 + epsilon)
}
data_sim(n=450)
data_sim <- function(n,sigma_n=.3){
# Define time
t <- seq(from=0, to=n,by=1)
tr1 = .01 * t
epsilon <- rnorm(mean = 0, sd = sigma_n, n = n)
s1 <- sapply(X = t, function(t) seasonal(t=t,amplitude = 2, period = 40))
s2 <- sapply(X = t, function(t) seasonal(t=t, amplitude = 1, period = 13.3))
return(s1 + s2 + tr1 + epsilon)
}
data_sim(n=450)
source("data_sim.R")
# Load project code
source("seasonal.R")
source("data_sim.R")
df <- data_sim(n)
n = 450
df <- data_sim(n)
df
library(ggplot2)
# Load project code
source("seasonal.R")
source("data_sim.R")
# Load R libraries
library(brms)
library(ggplot2)
set.seed(43)
n = 450
df <- data_sim(n)
df
ggplot(data = df, aes(y=y, x = t)) + geom_point()
ggplot(data = df, aes(y=y, x = t)) + geom_line()
ggplot(data = df, aes(y=y, x = t, colour = "b")) + geom_line()
ggplot(data = df, aes(y=y, x = t)) + geom_line(colour = "b")
ggplot(data = df, aes(y=y, x = t)) + geom_line(color = "b")
ggplot(data = df, aes(x = t)) + geom_line(aes(y=y, color = "b")
ggplot(data = df, aes(x = t)) + geom_line(aes(y=y, color = "blue")
ggplot(data = df, aes(x = t)) +
geom_line(aes(y=y), color = "blue")
ggplot(data = df, aes(x = t)) +
geom_line(aes(y=y), color = "blue") +
ggtitle("simulated data")
ggplot(data = df, aes(x = t)) +
geom_line(aes(y=y), color = "blue") +
ggtitle("simulated data") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df, aes(x = t)) +
geom_line(aes(y=y), color = "blue") +
ggtitle("Simulated Data") +
theme(plot.title = element_text(hjust = 0.5))
series_full <- ggplot(data = df, aes(x = t)) +
geom_line(aes(y=y), color = "blue") +
ggtitle("Simulated Data") +
theme(plot.title = element_text(hjust = 0.5))
ggsave(filename = "vis/timeseriesfull.png", plot = series_full, width = 10, height = 8, dpi = 300)
source("data_sim.R")
n = 450
df <- data_sim(n)
# Generate full tiemseries plot and sav output to vis file.
series_full <- ggplot(data = df, aes(x = t)) +
geom_line(aes(y=y), color = "blue") +
ggtitle("Simulated Data") +
theme(plot.title = element_text(hjust = 0.5))
ggsave(filename = "vis/timeseriesfull.png", plot = series_full, width = 10, height = 8, dpi = 300)
data_sim <- function(n,sigma_n=.3, seed =43){
set.seed(seed)
# Define time
t <- seq(from=0, to=n,by=1)
tr1 = .01 * t
epsilon <- rnorm(mean = 0, sd = sigma_n, n = n)
s1 <- sapply(X = t, function(t) seasonal(t=t,amplitude = 2, period = 40))
s2 <- sapply(X = t, function(t) seasonal(t=t, amplitude = 1, period = 13.3))
y <- s1 + s2 + tr1 + epsilon
df <- data.frame(y = y, x = t, tr1=tr1, s1 = s2, s2 = s2)
return(df)
}
source("data_sim.R")
source("traintest.R")
# Load R libraries
library(brms)
library(ggplot2)
n = 450
df <- data_sim(n)
# Generate full tiemseries plot and sav output to vis file.
series_full <- ggplot(data = df, aes(x = t)) +
geom_line(aes(y=y), color = "blue") +
ggtitle("Simulated Data") +
theme(plot.title = element_text(hjust = 0.5))
View(df)
data_sim <- function(n,sigma_n=.3, seed =43){
set.seed(seed)
# Define time
t <- seq(from=0, to=n-1,by=1)
tr1 = .01 * t
epsilon <- rnorm(mean = 0, sd = sigma_n, n = n)
s1 <- sapply(X = t, function(t) seasonal(t=t,amplitude = 2, period = 40))
s2 <- sapply(X = t, function(t) seasonal(t=t, amplitude = 1, period = 13.3))
y <- s1 + s2 + tr1 + epsilon
df <- data.frame(y = y, x = t, tr1=tr1, s1 = s2, s2 = s2)
return(df)
}
source("data_sim.R")
n = 450
df <- data_sim(n)
# Generate full tiemseries plot and sav output to vis file.
series_full <- ggplot(data = df, aes(x = t)) +
geom_line(aes(y=y), color = "blue") +
ggtitle("Simulated Data") +
theme(plot.title = element_text(hjust = 0.5))
ggsave(filename = "vis/timeseriesfull.png", plot = series_full, width = 10, height = 8, dpi = 300)
# Generate full tiemseries plot and sav output to vis file.
series_full <- ggplot(data = df, aes(x = t)) +
geom_line(aes(y=y), color = "blue") +
ggtitle("Simulated Data") +
theme(plot.title = element_text(hjust = 0.5))
ggsave(filename = "vis/timeseriesfull.png", plot = series_full, width = 10, height = 8, dpi = 300)
# Generate full tiemseries plot and sav output to vis file.
series_full <- ggplot(data = df, aes(x = x)) +
geom_line(aes(y=y), color = "blue") +
ggtitle("Simulated Data") +
theme(plot.title = element_text(hjust = 0.5))
ggsave(filename = "vis/timeseriesfull.png", plot = series_full, width = 10, height = 8, dpi = 300)
tt_split <- function(train_prop = .7, df, n){
x <- df$x
y <- df$y
round(train_prop * n)
x_train = x[1:n_train]
y_train = y[1:n_train]
}
tt_split(df,n)
df$y
df$x
tt_split <- function(train_prop = .7, df, n){
x <- df$x
y <- df$y
n_train <- round(train_prop * n)
x_train = x[1:n_train]
y_train = y[1:n_train]
return(y_train)
}
tt_split(df,n)
tt_split(df=df,n)
tt_split(df=df,n=n)
tt_split <- function(df, n, train_prop = .7){
x <- df$x
y <- df$y
n_train <- round(train_prop * n)
x_train = x[1:n_train]
y_train = y[1:n_train]
return(y_train)
}
tt_split(df=df,n=n)
df$x
tt_split <- function(df, n, train_prop = .7){
x <- df$x
y <- df$y
n_train <- round(train_prop * n)
x_train = x[1:n_train]
y_train = y[1:n_train]
x_test <- x[(n_train + 1):length(x)]
y_test <- y[(n_train + 1):length(y)]
return()
}
tt_split(df=df,n=n)
tt_split <- function(df, n, train_prop = .7){
x <- df$x
y <- df$y
n_train <- round(train_prop * n)
x_train = x[1:n_train]
y_train = y[1:n_train]
x_test <- x[(n_train + 1):length(x)]
y_test <- y[(n_train + 1):length(y)]
return(x_test)
}
tt_split(df=df,n=n)
length(tt_split(df=df,n=n))
tt_split <- function(df, n, train_prop = .7){
x <- df$x
y <- df$y
n_train <- round(train_prop * n)
x_train = x[1:n_train]
y_train = y[1:n_train]
x_test <- x[(n_train + 1):length(x)]
y_test <- y[(n_train + 1):length(y)]
return(x_train)
}
length(tt_split(df=df,n=n))
tt_split <- function(df, n, train_prop = .7){
x <- df$x
y <- df$y
n_train <- round(train_prop * n)
x_train = x[1:n_train]
y_train = y[1:n_train]
x_test <- x[(n_train + 1):length(x)]
y_test <- y[(n_train + 1):length(y)]
return(length(x_train) + length(x_test) )
}
length(tt_split(df=df,n=n))
tt_split <- function(df, n, train_prop = .7){
x <- df$x
y <- df$y
n_train <- round(train_prop * n)
x_train = x[1:n_train]
y_train = y[1:n_train]
x_test <- x[(n_train + 1):length(x)]
y_test <- y[(n_train + 1):length(y)]
return(length(x_train) + length(x_test) )
}
length(tt_split(df=df,n=n))
tt_split(df=df,n=n
tt_split(df=df,n=n)
tt_split(df=df,n=n)
tt_split <- function(df, n, train_prop = .7){
x <- df$x
y <- df$y
n_train <- round(train_prop * n)
x_train = x[1:n_train]
y_train = y[1:n_train]
x_test <- x[(n_train + 1):length(x)]
y_test <- y[(n_train + 1):length(y)]
return(list(
train = list(x = x_train, y = y_train),
test = list(x = x_test, y = y_test)
))
}
source("traintest.R")
# Split trian and test data
tt_split(df, n)
# Split trian and test data
split_data =tt_split(df, n)
split_data$train
split_data$train$x
tt_split <- function(df, n, train_prop = .7){
x <- df$x
y <- df$y
n_train <- round(train_prop * n)
x_train = x[1:n_train]
y_train = y[1:n_train]
x_test <- x[(n_train + 1):length(x)]
y_test <- y[(n_train + 1):length(y)]
# Combine train and test into one data frame
train_df <- data.frame(x = x_train, y = y_train, set = "Train")
test_df <- data.frame(x = x_test, y = y_test, set = "Test")
combined_df <- rbind(train_df, test_df)
}
source("traintest.R")
# Split trian and test data
split_data =tt_split(df, n)
# Split trian and test data
split_data <- tt_split(df, n)
split_data
ggplot(combined_df, aes(x = x, y = y, color = set)) +
geom_line() +
labs(title = "Train vs Test Split", x = "x", y = "y") +
theme_minimal() +
scale_color_manual(values = c("Train" = "blue", "Test" = "red"))
ggplot(split_data, aes(x = x, y = y, color = set)) +
geom_line() +
labs(title = "Train vs Test Split", x = "x", y = "y") +
theme_minimal() +
scale_color_manual(values = c("Train" = "blue", "Test" = "red"))
# Load R libraries
library(brms)
# Fit brms model
brm(y ~ gp(x), data = df)
split_data
trian_test <- split_data[, split_data$set=="Test"]
trian_test
trian_test <- split_data[split_data$set=="Test",]
train_data <- split_data[split_data$set=="Train",]
train_data
test_data <- split_data[split_data$set=="Test",]
test_data
# Fit brms model
brm(y ~ hsgp(x), data = train_data)
# Fit brms model
brm(y ~ hsgp(x), data = train_data)
# Fit brms model
brm(y ~ hsgp(x, k = 20), data = train_data)
# Load R libraries
library(brms)
train_data
# Fit brms model
brm(y ~ gp(x, k = 20), data = train_data)
# Fit brms model
fit <- brm(y ~ gp(x, k = 20), data = train_data, backend = "cmdstanr")
?set_cmdstan_path.
library(cmdstanr)
source("traintest.R")
source("traintestsplit.R")
# Fit brms model
fit <- brm(y ~ gp(x, k = 20), data = train_data)
conditional_effects
conditional_effects(fit)
library(cmdstanr)
library(cmdstanr)
library(lgpr2 )
testdata_002
testdata
plot_data(testdata, facet_by = "id", color_by = "sex") + xlab('Age (months)')
library(lgpr2)
m <- LonModel$new(y ~ gp(time) + gp(time, arm) + gp(time, id) + gp(time, sex) + gp(weight))
?set_cmdstan_path
set_cmdstan_path()
cmdstan_path()
cmdstan_version()
library(cmdstanr)
cmdstan_version()
readRDS(file = "../../../lgrp_files/lgrp2.RDS")
rds_lgpr <-readRDS(file = "../../../lgrp_files/lgrp2.RDS")
View(rds_lgpr)
rds_lgpr$stan_data
rds_lgpr$orig_data
rds_lgpr$full_term_confs
rds_lgpr$full_term_confs
lgrp2::hs_bf()
library(lgpr2)
lgrp2::hs_bf()
rds_lgpr$stan_data$B_timeXid
rds_lgpr$stan_data$B_timeXarm
rds_lgpr$stan_data$B_timeXsex
rds_lgpr$stan_data$n_LON
rds_lgpr$stan_data$L_time
rds_lgpr$stan_data$dat_id_LON
sum(dat$id == rds_lgpr$stan_data$dat_id_LON)
dat
dat <- testdata
sum(dat$id == rds_lgpr$stan_data$dat_id_LON)
rds_lgpr$stan_data$G_id
rds_lgpr$stan_data$c_hat
rds_lgpr$stan_data$G_arm
rds_lgpr$stan_data$B_timeXsex
rds_lgpr$stan_data$dat_y
rds_lgpr$stan_data$B_timeXarm
rds_lgpr$full_term_confs
library(cmdstanr)
setwd("../../../cuped_analyis/")
source("utils.R")
# Load project code.
source("utils.R")
generate_data()
d <- generate_data()
d <- generate_data()
sm_cuped <- "
data {
int<lower=0> N;   // number of data items
int<lower=0> K;   // number of predictors
matrix[N, K] x;   // predictor matrix
vector[N] y;      // outcome vector
}
parameters {
real alpha;           // intercept
vector[K] beta;       // coefficients for predictors
real<lower=0> sigma;  // error scale
}
model {
y ~ normal(x * beta + alpha, sigma);  // likelihood
}
generated quantities{
}
"
mod <- cmdstan_model(sm_cuped)
d <- generate_data()
# Load project code.
source("utils.R")
# Load libraries
library(cmdstanr)
d <- generate_data()
ggplot(d, aes(revenue)) +
geom_density()
View(d)
ggplot(d, aes(revenue1)) +
geom_density()
ggplot(d, aes(revenue1, rev)) +
geom_density()
ggplot(d, aes(revenue1, revenue0)) +
geom_density()
View(d)
View(d)
View(d)
ggplot(d, aes(revenue1,fill = ad_campaign)) +
geom_density()
ggplot(d, aes(revenue1, fill = as.factor(ad_campaign))) +
geom_density()
ggplot(d, aes(revenue1, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5)
ggplot(d, aes(revenue1, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Pre Campaign")
ggplot(d, aes(revenue1, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Post Campaign")
ggplot(d, aes(revenue0, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Pre Campaign")
ggplot(d, aes(revenue1, fill = ad_campaign)) +
geom_density(alpha = 0.5) + labs(title = "Revenue Post Campaign")
as.factor(
as.factor(
ggplot(d, aes(revenue0, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Pre Campaign")
ggplot(d, aes(revenue1, fill = as.factor(ad_campaign))) +
ggplot(d, aes(revenue0, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Pre Campaign")
ggplot(d, aes(revenue1, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Post Campaign")
ggplot(d, aes(revenue0, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Pre Campaign",
fill = "Ad Campaign")
ggplot(d, aes(revenue1, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Post Campaign",
fill = "Ad Campaign")
p1 <- ggplot(d, aes(revenue0, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Pre Campaign",
fill = "Ad Campaign")
p2 <- ggplot(d, aes(revenue1, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Post Campaign",
fill = "Ad Campaign")
p1/p2
library(patchwork)
library(patchwork)
p1 <- ggplot(d, aes(revenue0, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Pre Campaign",
fill = "Ad Campaign")
p2 <- ggplot(d, aes(revenue1, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Post Campaign",
fill = "Ad Campaign")
p1/p2
fill = "Ad Campaign" + theme(plot.title = element_text(hjust = 0.5))
p1 <- ggplot(d, aes(revenue0, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Pre Campaign",
fill = "Ad Campaign") + theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(d, aes(revenue1, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Post Campaign",
fill = "Ad Campaign") + theme(plot.title = element_text(hjust = 0.5))
p1/p2
geom_density(alpha = 0.5) + labs(title = "Revenue Post Campaign",
theme(plot.title = element_text(hjust = 0.5))
p1 <- ggplot(d, aes(revenue0, fill = as.factor(ad_campaign))) +
p2 <- ggplot(d, aes(revenue1, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Post Campaign",
fill = "Ad Campaign", x = "Revenue") +
theme(plot.title = element_text(hjust = 0.5))
p1 <- ggplot(d, aes(revenue0, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Pre Campaign",
fill = "Ad Campaign", x = "Revenue") + theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(d, aes(revenue1, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Post Campaign",
fill = "Ad Campaign", x = "Revenue") +
theme(plot.title = element_text(hjust = 0.5))
p1/p2
p1 <- ggplot(d, aes(revenue0, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Pre Campaign",
fill = "Ad Campaign", x = "") + theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(d, aes(revenue1, fill = as.factor(ad_campaign))) +
geom_density(alpha = 0.5) + labs(title = "Revenue Post Campaign",
fill = "Ad Campaign", x = "Revenue") +
theme(plot.title = element_text(hjust = 0.5))
p1/p2
# Statistical calculations.
diff_mean <- d[,"revenue1" ]
diff_mean
mean(d[d$ad_campaign==1,"revenue1" ])
# Statistical calculations.
diff_mean <- mean(d[d$ad_campaign==1,"revenue1" ] - d[d$ad_campaign==0,"revenue1" ])
d[d$ad_campaign==1,"revenue1" ] - d[d$ad_campaign==0,"revenue1" ]
d[d$ad_campaign==0,"revenue1" ]
# Statistical calculations.
diff_mean <- mean(d[d$ad_campaign==1,"revenue1" ]) - mean(d[d$ad_campaign==0,"revenue1" ])
diff_mean
d
# Modle matrix
lm(revenue1 ~ ad_campaign ,data = d)
# hte sma ecna be ahcieved using ols.
# Model matrix
lm(revenue1 ~ ad_campaign ,data = d)
# The same ecna be achieved using ols.
# Model matrix
ols_fit <- lm(revenue1 ~ ad_campaign ,data = d)
summary(ols_fit)
model.matrix(ols_fit)
dm = model.matrix(ols_fit)
stan_data <- list(N = length(d), K=ncol(dm))
View(stan_data)
stan_data <- list(N = length(d), K=ncol(dm)x = dm, y = d$revenue1)
stan_data <- list(N = length(d), K=ncol(dm),x = dm, y = d$revenue1)
data_list <- list(N = length(d), K=ncol(dm),x = dm, y = d$revenue1)
# Load libraries
library(ggplot2)
ggplot()
p1/p2
ncol(dm)
length(d)
p1/p2
ols_fit
